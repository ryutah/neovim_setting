##################################################################
# Basic
##################################################################
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = 'call hook#add#denite#load()'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = 'call hook#add#defx#load()'


##################################################################
# Snipets, Completions
##################################################################
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# build = './install.sh'
# rev = '*'
# hook_add = '''
# inoremap <silent><expr> <C-o> pumvisible() ? coc#_select_confirm() : 
#                                            \"\<C-g>u\<C-o>\<c-r>=coc#on_enter()\<C-o>"
# function! SetupCommandAbbrs(from, to)
#   exec 'cnoreabbrev <expr> '.a:from
#         \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
#         \ .'? ("'.a:to.'") : ("'.a:from.'"))'
# endfunction
#
# " Use C to open coc config
# call SetupCommandAbbrs('C', 'CocConfig')
#
# " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
# " Coc only does snippet and additional edit on confirm.
# inoremap <expr> <C-o> pumvisible() ? "\<C-y>" : "\<C-g>u\<C-o>"
#
# " Use K to show documentation in preview window
# nnoremap <silent> K :call <SID>show_documentation()<CR>
#
# function! s:show_documentation()
#   if (index(['vim','help'], &filetype) >= 0)
#     execute 'h '.expand('<cword>')
#   else
#     call CocAction('doHover')
#   endif
# endfunction
#
# " Remap keys for gotos
# nmap <silent> gd <Plug>(coc-definition)
# nmap <silent> gy <Plug>(coc-type-definition)
# nmap <silent> gi <Plug>(coc-implementation)
# nmap <silent> gr <Plug>(coc-references)
#
# " Remap for rename current word
# nmap <space>rn <Plug>(coc-rename)
# '''

[[plugins]]
repo = 'ncm2/ncm2'
hook_add = 'call hook#add#ncm2#load()'

[[plugins]]
repo = 'ncm2/ncm2-bufword'

[[plugins]]
repo = 'ncm2/ncm2-path'

[[plugins]]
repo = 'ncm2/ncm2-ultisnips'
hook_add = 'call hook#add#ncm2_ultisnips#load()'

[[plugins]]
repo = 'ncm2/ncm2-vim'
depends = ['neco-vim']

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'ncm2/ncm2-match-highlight'

[[plugins]]
repo     = 'SirVer/ultisnips'
hook_add = 'call hook#add#ultisnips#load()'

[[plugins]]
repo = 'honza/vim-snippets'


##################################################################
# Code Format, Translate
##################################################################
[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'mattn/emmet-vim'


##################################################################
# Languages Extend
##################################################################
[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'tokorom/vim-review'
hook_add = '''
let g:vim_review#include_filetypes = ['go', 'javascript', 'html']
'''

[[plugins]]
repo = 'aklt/plantuml-syntax'

# For composite filetype including. Like vue.
[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
'''
depends = ['tabular']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'pangloss/vim-javascript'
hook_add = '''
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
depends = ['vim-javascript']


##################################################################
# Git
##################################################################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = 'call hook#add#gitgutter#load()'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'idanarye/vim-merginal'
depends = ['vim-fugitive']

[[plugins]]
repo = 'rhysd/committia.vim'


##################################################################
# Editor Style
##################################################################
[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_setColors = 0
let g:indentLine_char = "┃"
let g:indentLine_fileTypeExclude = ['markdown']
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'call hook#add#lightline#load()'


##################################################################
# Linters XXX: lazyでいいかも
##################################################################
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = 'call hook#add#ale#load()'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
'''

[[plugins]]
repo = 'https://tpope.io/vim/repeat.git'
