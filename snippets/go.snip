snippet     func
abbr        func ${name}(${args}) ${returns} {}
options     word
    func ${1:#:name}(${2:#:args}) ${3:int} {
        ${4:return}
    }

snippet     funcmain
abbr        func main() {}
options     head
    func main() {
        ${0:TARGET}
    }

snippet     funcinit
abbr        func init() {}
options     head
    func init() {
        ${0:TARGET}
    }

snippet     funchandler
abbr        func ${name}(http.ResponseWriter, *http.Request) {}
options     head
    func ${1:#:handler_name}(w http.ResponseWriter, r *http.Request) {
        ${0:TARGET}
    }

snippet     method
abbr        func (${t_name} ${type})${func_name}(${args}) ${return} {}
options     head
    func (${1:#:t_name} ${2:#:type}) ${3:#:func_name}(${4:#:args}) ${5:#:return} {
        ${0:TARGET}
    }

snippet     execcmd
abbr        cmd := exec.Command(${command}, ${args})...
options     head
    cmd := exec.Command(${1:#:command}, ${2:#:args})
    if err := cmd.Run(); err != nil {
        ${3:log.Printf("failed to exec command: %v", err)}
    }
    ${0:TARGET}

snippet     functestcase
abbr        func Test${name}(t *testing.T) { // case test }
options     head
    func Test${1:#:name}(t *testing.T) {
        type (
            in struct {
                ${2:#:in}
            }
            returns struct {
                ${3:#:returns}
            }
            out struct {
                ${4:#:out}
            }
        )
        cases := []struct{
            name    string
            in      in
            returns returns
            out     out
        }{
            {
                name: ${5:"test1"},
                in: in{
                    ${6:#:in}
                },
                returns: returns{
                    ${7:#:returns}
                },
                out: out{
                    ${8:#:out}
                },
            },
        }

        for _, c := range cases {
            t.Run(c.name, func(t *testing.T) {
                ${0:TARGET}
            })
        }
    }

snippet     mockctrl
abbr        ctrl := gomock.NewController(t)...
options     head
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()

snippet     struct
abbr        ${name} struct {}
options     word
    ${1:#:name} struct {
        ${0:TARGET}
    }

snippet     interface
abbr        ${name} interface {}
options     word
    ${1:#:name} interface {
        ${0:TARGET}
    }


snippet     structt
abbr        type ${name} struct {}
options     word
    type ${1:#:name} struct {
        ${0:TARGET}
    }

snippet     interfacet
abbr        type ${name} interface {}
options     word
    type ${1:#:name} interface {
        ${0:TARGET}
    }

snippet     recover
abbr        recover()
options     word
    recover()

snippet     panic
abbr        panic()
options     word
    panic(${0:TARGET})

