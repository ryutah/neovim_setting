# Macro
snippet     println!
abbr        println!()
options     head
    println!(${1:TARGET});

snippet     printfmt!
abbr        println!(${format}, ${args})
options     head
    println!(${1:#:format}, ${2:#:args});

snippet     panic!
abbr        panic!()
options     head
    panic!(${1:TARGET});

snippet     panicfmt!
abbr        panic!(${format}, ${args})
options     head
    panic!(${1:#:format}, ${2:#:args});

snippet     format!
abbr        format!(${format}, ${args})
options     head
    format!(${1:#:format}, ${2:#:args})

snippet     assert!
abbr        assert!()
options     head
    assert!(${1:TARGET});

snippet     assertfmt!
abbr        assert!(${assert}, ${format}, ${args})
options     head
    assert!(${1:#:assert}, ${2:#:format}, ${3:#:args});

snippet     assert_eq!
abbr        assert_eq!(${want}, ${got})
options     head
    assert_eq!(${1:#:want}, ${2:#:got});

snippet     assert_ne!
abbr        assert_ne!(${not_want}, ${got})
options     head
    assert_ne!(${1:#:not_waNT}, ${2:#:got});

snippet     extcrate
abbr        extern crate ${crate}
options     head
    extern crate ${1:TARGET};

snippet     vec!
abbr        vec![]
options     head
    vec![${1:TARGET}]

snippet     testpanic
options     head
    #[test]
    #[should_panic]
    fn ${1:#:test_function_name}() {
        ${0:TARGET}
    }

snippet     testpanicmsg
options     head
    #[test]
    #[should_panic(expected = "${2:#:panic_message})"]
    fn ${2:#:test_function_name}() {
        ${0:TARGET}
    }

snippet     loop
abbr        loop {}
options     head
    loop {
        ${0:TARGET}
    }

snippet     while
abbr        while (${condition}) {}
options     head
    while ${1:#:condition} {
        ${0:TARGET}
    }

snippet     fnmain
abbr        func main () {}
options     head
    fn main() {
        ${0:TARGET}
    }
