# Macro
snippet     print
abbr        print!()
options     word
    print!(${1:TARGET})

snippet     printfmt
abbr        print!(${format}, ${args})
options     word
    print!(${1:#:format}, ${2:#:args});

snippet     println
abbr        println!()
options     word
    println!(${1:TARGET});

snippet     printlnfmt
abbr        println!(${format}, ${args})
options     word
    println!(${1:#:format}, ${2:#:args});

snippet     panic
abbr        panic!()
options     word
    panic!(${1:TARGET});

snippet     panicfmt
abbr        panic!(${format}, ${args})
options     word
    panic!(${1:#:format}, ${2:#:args});

snippet     format
abbr        format!(${format}, ${args})
options     word
    format!(${1:#:format}, ${2:#:args})

snippet     assert
abbr        assert!()
options     head
    assert!(${1:TARGET});

snippet     assertfmt
abbr        assert!(${assert}, ${format}, ${args})
options     head
    assert!(${1:#:assert}, ${2:#:format}, ${3:#:args});

snippet     assert_eq
abbr        assert_eq!(${want}, ${got})
options     head
    assert_eq!(${1:#:want}, ${2:#:got});

snippet     assert_ne
abbr        assert_ne!(${not_want}, ${got})
options     head
    assert_ne!(${1:#:not_waNT}, ${2:#:got});

snippet     eprintln
abbr        eprintln!()
options     head
    eprintln!(${1:TARGET});

snippet     eprintfmt
abbr        eprintln!(${format}, ${args})
options     head
    eprintln!(${1:#:format}, ${2:#:args});

snippet     extcrate
abbr        extern crate ${crate}
options     head
    extern crate ${1:TARGET};

snippet     vec
abbr        vec![]
options     word
    vec![${1:TARGET}]

snippet     testpanic
options     head
    #[test]
    #[should_panic]
    fn ${1:#:test_function_name}() {
        ${0:TARGET}
    }

snippet     testpanicmsg
options     head
    #[test]
    #[should_panic(expected = "${2:#:panic_message})"]
    fn ${2:#:test_function_name}() {
        ${0:TARGET}
    }

snippet     loop
abbr        loop {}
options     head
    loop {
        ${0:TARGET}
    }

snippet     while
abbr        while (${condition}) {}
options     head
    while ${1:#:condition} {
        ${0:TARGET}
    }

snippet     fnmain
abbr        func main () {}
options     head
    fn main() {
        ${0:TARGET}
    }

snippet     testmod
abbr        #[cfg(test)] mod test {}
options     head
    #[cfg(test)]
    mod ${1:#:mod} {
        use super::*;

        ${0:TARGET}
    }

snippet     writeln
abbr        writeln!(&mut ${writer}, ${string})
options     word
    writeln!(&mut ${1:#:writer}, ${2:#:format})

snippet     write
abbr        write!(&mut ${writer}, ${string})
options     word
    write!(&mut ${1:#:writer}, ${2:#:format})

snippet     select
abbr        select! {}
options     head
    select! {
        ${1:val} = ${2:receiver}.recv() => ${0:TARGET},
    };

snippet     arm
abbr        ${condition} => ${TARGET}
options     head
    ${1:()} => ${0:TARGET},

snippet     macro_use
abbr        #[macro_use]
options     head
    #[macro_use]

snippet     fnwhere
abbr        fn${name}<${generics}>(${args}) where ${type} {}
options     head
    fn ${1:#:name}<${2:T}>(${3:#:args})
    where
        ${4:T}: ${5:#:type},
    {
        ${0:TARGET}
    }

snippet     fn-where
abbr        fn${name}<${generics}>(${args}) -> ${return} where ${type} {}
options     head
    fn ${1:#:name}<${2:T}>(${3:#:args}) -> ${4:#:return}
    where
        ${5:T}: ${6:#:type},
    {
        ${0:TARGET}
    }

snippet     structwhere
abbr        struct<${generics}
options     word
    struct ${1:#:name}<${2:T}> ${3:#:return}
    where
        ${4:T}: ${5:#:type},
    {
        ${0:TARGET}
    }

snippet     implwhere
abbr        impl<${generics}> ${target} where ${type}<${generics}> {}
options     head
    impl<${1:T}> ${2:#:target}<${3:T}>
    where
        ${4:T}: ${5:#:type},
    {
        ${0:TARGET}
    }

snippet     implforwhere
abbr        impl<${generics}> ${trait} for ${target}<${generics}> {}
options     head
    impl<${1:T}> ${2:#:trait} for ${3:#:target}<${4:T}>
    where
        ${5:T}: ${6:#:type},
    {
        ${0:TARGET}
    }
