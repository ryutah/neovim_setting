priority 10

snippet /^pkg/ "Package declaration" r
package ${1:main}
endsnippet

snippet funct "Test function" b
func Test$1(t *testing.T) {
	$2
}
endsnippet

snippet funcb "Bench function" b
func Benchmark$1(b *testing.B) {
	$2
}
endsnippet

snippet functcase "Test function with case" b
func Test$1(t *testing.T) {
	type(
		in       struct{}
		ret      struct{}
		expected struct{}
	)
	cases := []struct{
		name string
		in        in
		ret       ret
		expected  expected
	}{
		{
			name:      "${2:test1}",
			in:        in{},
			ret:       ret{},
			expected:  expected{},
		},
	}

	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			$3
		})
	}
}
endsnippet

snippet graceful_shutdown "Graceful Shutdown" b
package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "hello world")
	})

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	srv := &http.Server{
		Handler: mux,
		Addr:    fmt.Sprintf(":%s", port),
	}
	go func() {
		if err := srv.ListenAndServe(); err != http.ErrServerClosed {
			log.Fatalln("Server closed with error:", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGTERM, os.Interrupt)
	log.Printf("SIGNAL %d received, then shutting down...\n", <-quit)

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Println("Failed to gracefully shutdown:", err)
	}
	log.Println("Server shutdown")
}
endsnippet
